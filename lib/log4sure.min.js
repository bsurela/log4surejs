var LogServer = function (e) { this.version = .1, this.token = e, this.loadPreReqAndConnect(), window.l4sRemoteLogger = { original: {}, token: "", log: function (e) { var n = { type: "log", token: window.l4sRemoteLogger.token, args: arguments }; window.l4sRemoteLogger.remoteEvent(n) }, error: function (e) { var n = { type: "error", token: window.l4sRemoteLogger.token, args: arguments }; window.l4sRemoteLogger.remoteEvent(n) }, info: function (e) { var n = { type: "info", token: window.l4sRemoteLogger.token, args: arguments }; window.l4sRemoteLogger.remoteEvent(n) }, warn: function (e) { var n = { type: "warn", token: window.l4sRemoteLogger.token, args: arguments }; window.l4sRemoteLogger.remoteEvent(n) }, remoteEvent: function (e) { window.logServerConnectComplete === !0 && window.logServerProxy.invoke("consoleEvent", e).fail(function (e) { throw e }) }, original: function () { return this.original }, init: function (e) { this.token = e, window.l4sRemoteLogger = this, console.log("beginning remote logging"), this.original.log = console.log, this.original.error = console.error, this.original.info = console.info, this.original.warn = console.warn, console.log = this.log, console.warn = this.warn, console.error = this.error, console.info = this.info }, reset: function () { console.warn = this.original.warn, console.log = this.original.log, console.info = this.original.info, console.error = this.original.error, console.log("remote logging ended") } }, this.turnOnRemoteLogging = function () { l4sRemoteLogger.init(this.token) }, this.turnOffRemoteLogging = function () { l4sRemoteLogger.reset() }, this.log = function (e, n, t, o, r, i, a, c, s, l) { var u = this, d = { value1: e, value2: n, value3: t, value4: o, value5: r, value6: i, value7: a, value8: c, value9: s, value10: l, token: u.token, url: window.location.href }; if (window.logServerConnectComplete === !0) { if (null === this.token || void 0 === this.token) throw "token cannot be null"; u.updateLastActivity(), window.logServerProxy.invoke("log", d).fail(function (e) { throw e }) } else this.forceDisconnect ? this.connect() : (window.callBuffer.push(["log", d]), console.log("logging custom - connect incomplete")) }, this.logError = function (e, n, t, o) { var r = this, i = null; null !== o && void 0 !== o && (i = JSON.stringify(o)); var a = { type: e, message: n, stack: t, data: i, token: r.token, url: window.location.href }; window.logServerConnectComplete === !0 ? (r.updateLastActivity(), window.logServerProxy.invoke("logError", a).fail(function (e) { throw e })) : r.forceDisconnect ? r.connect() : (window.callBuffer.push(["logError", a]), console.log("logging Error - connect incomplete")) }, this.logText = function (e) { var n = this, t = { value: e, token: n.token, url: window.location.href }; window.logServerConnectComplete === !0 ? (n.updateLastActivity(), window.logServerProxy.invoke("logText", t).fail(function (e) { throw e })) : n.forceDisconnect ? n.connect() : (window.callBuffer.push(["logText", t]), console.log("logging text - connect incomplete")) } }; LogServer.prototype = {
    lastActivity: (new Date).getTime(), forceDisconnect: !1, isIdle: function () { var e = (new Date).getTime(); return e - this.lastActivity > 6e4 ? !0 : !1 }, initTimer: function () { var e = this; e.forceDisconnect = !1, window.setInterval(function () { e.isIdle() && e.disconnect() }, 6e4) }, updateLastActivity: function () { this.lastActivity = (new Date).getTime() }, disconnect: function () { window.logServerConnectComplete && (this.conn.stop(), window.clearInterval(), this.forceDisconnect = !0, window.logServerProxy = null, window.logServerConnectComplete = !1) }, loadPreReqAndConnect: function () { void 0 === window.callBuffer && (window.callBuffer = new Array), void 0 === window.logServerConnectComplete && (window.logServerConnectComplete = !1); var e = this; if ("undefined" == typeof window.jQuery) { var n = document.getElementsByTagName("head")[0], t = document.createElement("script"); t.type = "text/javascript", t.src = "http://log4sure.com/Scripts/jquery-2.1.3.min.js"; var o = !1; t.onload = t.onreadystatechange = function () { o || this.readyState && "loaded" !== this.readyState.toLowerCase() && "complete" !== this.readyState.toLowerCase() || (o = !0, e.loadSingalR()) }, n.appendChild(t) } else this.loadSingalR() }, loadSingalR: function () {
        !function (e, n, t) { "use strict"; function o(n, t) { var o, r; if (e.isArray(n)) { for (o = n.length - 1; o >= 0; o--) r = n[o], "object" === e.type(n) || "string" === e.type(r) && s.transports[r] || (t.log("Invalid transport: " + r + ", removing it from the transports list."), n.splice(o, 1)); 0 === n.length && (t.log("No transports remain within the specified transport array."), n = null) } else if ("object" === e.type(n) || s.transports[n] || "auto" === n) { if ("auto" === n && s._.ieVersion <= 8) return ["longPolling"] } else t.log("Invalid transport: " + n.toString() + "."), n = null; return n } function r(e) { return "http:" === e ? 80 : "https:" === e ? 443 : void 0 } function i(e, n) { return n.match(/:\d+$/) ? n : n + ":" + r(e) } function a(n, t) { var o = this, r = []; o.tryBuffer = function (t) { return n.state === e.signalR.connectionState.connecting ? (r.push(t), !0) : !1 }, o.drain = function () { if (n.state === e.signalR.connectionState.connected) for (; r.length > 0;) t(r.shift()) }, o.clear = function () { r = [] } } var c = { nojQuery: "jQuery was not found. Please ensure jQuery is referenced before the SignalR client JavaScript file.", noTransportOnInit: "No transport could be initialized successfully. Try specifying a different transport or none at all for auto initialization.", errorOnNegotiate: "Error during negotiation request.", stoppedWhileLoading: "The connection was stopped during page load.", stoppedWhileNegotiating: "The connection was stopped during the negotiate request.", errorParsingNegotiateResponse: "Error parsing negotiate response.", protocolIncompatible: "You are using a version of the client that isn't compatible with the server. Client version {0}, server version {1}.", sendFailed: "Send failed.", parseFailed: "Failed at parsing response: {0}", longPollFailed: "Long polling request failed.", eventSourceFailedToConnect: "EventSource failed to connect.", eventSourceError: "Error raised by EventSource", webSocketClosed: "WebSocket closed.", pingServerFailedInvalidResponse: "Invalid ping response when pinging server: '{0}'.", pingServerFailed: "Failed to ping server.", pingServerFailedStatusCode: "Failed to ping server.  Server responded with status code {0}, stopping the connection.", pingServerFailedParse: "Failed to parse ping server response, stopping the connection.", noConnectionTransport: "Connection is in an invalid state, there is no transport active." }; if ("function" != typeof e) throw new Error(c.nojQuery); var s, l, u = "complete" === n.document.readyState, d = e(n), g = "__Negotiate Aborted__", p = { onStart: "onStart", onStarting: "onStarting", onReceived: "onReceived", onError: "onError", onConnectionSlow: "onConnectionSlow", onReconnecting: "onReconnecting", onReconnect: "onReconnect", onStateChanged: "onStateChanged", onDisconnect: "onDisconnect" }, f = function (e, t) { if (t !== !1) { var o; "undefined" != typeof n.console && (o = "[" + (new Date).toTimeString() + "] SignalR: " + e, n.console.debug ? n.console.debug(o) : n.console.log && n.console.log(o)) } }, v = function (n, t, o) { return t === n.state ? (n.state = o, e(n).triggerHandler(p.onStateChanged, [{ oldState: t, newState: o }]), !0) : !1 }, h = function (e) { return e.state === s.connectionState.disconnected }, m = function (t) { var o = t._.config, r = function (n) { e(t).triggerHandler(p.onError, [n]) }; !o.pingIntervalId && o.pingInterval && (t._.pingIntervalId = n.setInterval(function () { s.transports._logic.pingServer(t).fail(r) }, o.pingInterval)) }, w = function (e) { var t, o; e._.configuredStopReconnectingTimeout || (o = function (e) { e.log("Couldn't reconnect within the configured timeout (" + e.disconnectTimeout + "ms), disconnecting."), e.stop(!1, !1) }, e.reconnecting(function () { var e = this; e.state === s.connectionState.reconnecting && (t = n.setTimeout(function () { o(e) }, e.disconnectTimeout)) }), e.stateChanged(function (e) { e.oldState === s.connectionState.reconnecting && n.clearTimeout(t) }), e._.configuredStopReconnectingTimeout = !0) }; s = function (e, n, t) { return new s.fn.init(e, n, t) }, s._ = { defaultContentType: "application/x-www-form-urlencoded; charset=UTF-8", ieVersion: function () { var e, t; return "Microsoft Internet Explorer" === n.navigator.appName && (t = /MSIE ([0-9]+\.[0-9]+)/.exec(n.navigator.userAgent), t && (e = n.parseFloat(t[1]))), e }(), error: function (e, n) { var t = new Error(e); return t.source = n, t }, transportError: function (e, n, o) { var r = this.error(e, o); return r.transport = n ? n.name : t, r }, format: function () { for (var e = arguments[0], n = 0; n < arguments.length - 1; n++) e = e.replace("{" + n + "}", arguments[n + 1]); return e }, firefoxMajorVersion: function (e) { var n = e.match(/Firefox\/(\d+)/); return !n || !n.length || n.length < 2 ? 0 : parseInt(n[1], 10) } }, s.events = p, s.resources = c, s.ajaxDefaults = { processData: !0, timeout: null, async: !0, global: !1, cache: !1 }, s.changeState = v, s.isDisconnecting = h, s.connectionState = { connecting: 0, connected: 1, reconnecting: 2, disconnected: 4 }, s.hub = { start: function () { throw new Error("SignalR: Error loading hubs. Ensure your hubs reference is correct, e.g. <script src='/signalr/js'></script>.") } }, d.load(function () { u = !0 }), s.fn = s.prototype = { init: function (n, t, o) { var r = e(this); this.url = n, this.qs = t, this._ = { connectingMessageBuffer: new a(this, function (e) { r.triggerHandler(p.onReceived, [e]) }), onFailedTimeoutHandle: null }, "boolean" == typeof o && (this.logging = o) }, _parseResponse: function (e) { var n = this; return e && "text" === n.ajaxDataType ? n.json.parse(e) : e }, json: n.JSON, isCrossDomain: function (t, o) { var r; return t = e.trim(t), 0 !== t.indexOf("http") ? !1 : (o = o || n.location, r = n.document.createElement("a"), r.href = t, r.protocol + i(r.protocol, r.host) !== o.protocol + i(o.protocol, o.host)) }, ajaxDataType: "text", contentType: "application/json; charset=UTF-8", logging: !1, state: s.connectionState.disconnected, keepAliveData: {}, clientProtocol: "1.3", reconnectDelay: 2e3, transportConnectTimeout: 0, disconnectTimeout: 3e4, keepAliveWarnAt: 2 / 3, start: function (t, r) { var i, a, l, f = this, h = { pingInterval: 3e5, waitForPageLoad: !0, transport: "auto", jsonp: !1 }, S = f._deferral || e.Deferred(), y = n.document.createElement("a"); if (f._deferral = S, !f.json) throw new Error("SignalR: No JSON parser found. Please ensure json2.js is referenced before the SignalR.js file if you need to support clients without native JSON parsing support, e.g. IE<8."); if ("function" === e.type(t) ? r = t : "object" === e.type(t) && (e.extend(h, t), "function" === e.type(h.callback) && (r = h.callback)), h.transport = o(h.transport, f), !h.transport) throw new Error("SignalR: Invalid transport(s) specified, aborting start."); return f._.config = h, u || h.waitForPageLoad !== !0 ? f.state === s.connectionState.connecting ? S.promise() : v(f, s.connectionState.disconnected, s.connectionState.connecting) === !1 ? (S.resolve(f), S.promise()) : (w(f), y.href = f.url, y.protocol && ":" !== y.protocol ? (f.protocol = y.protocol, f.host = y.host, f.baseUrl = y.protocol + "//" + y.host) : (f.protocol = n.document.location.protocol, f.host = n.document.location.host, f.baseUrl = f.protocol + "//" + f.host), f.wsProtocol = "https:" === f.protocol ? "wss://" : "ws://", "auto" === h.transport && h.jsonp === !0 && (h.transport = "longPolling"), this.isCrossDomain(f.url) && (f.log("Auto detected cross domain url."), "auto" === h.transport && (h.transport = ["webSockets", "longPolling"]), "undefined" == typeof h.withCredentials && (h.withCredentials = !0), h.jsonp || (h.jsonp = !e.support.cors, h.jsonp && f.log("Using jsonp because this browser doesn't support CORS.")), f.contentType = s._.defaultContentType), f.withCredentials = h.withCredentials, f.ajaxDataType = h.jsonp ? "jsonp" : "text", e(f).bind(p.onStart, function () { "function" === e.type(r) && r.call(f), S.resolve(f) }), i = function (t, o) { var r = s._.error(c.noTransportOnInit); if (o = o || 0, o >= t.length) return e(f).triggerHandler(p.onError, [r]), S.reject(r), void f.stop(); if (f.state !== s.connectionState.disconnected) { var a = t[o], l = "object" === e.type(a) ? a : s.transports[a], u = !1, g = function () { u || (u = !0, n.clearTimeout(f._.onFailedTimeoutHandle), l.stop(f), i(t, o + 1)) }; if (f.transport = l, 0 === a.indexOf("_")) return void i(t, o + 1); try { f._.onFailedTimeoutHandle = n.setTimeout(function () { f.log(l.name + " timed out when trying to connect."), g() }, f.transportConnectTimeout), l.start(f, function () { var t = s._.firefoxMajorVersion(n.navigator.userAgent) >= 11, o = !!f.withCredentials && t; f.state !== s.connectionState.disconnected && (u || (u = !0, n.clearTimeout(f._.onFailedTimeoutHandle), l.supportsKeepAlive && f.keepAliveData.activated && s.transports._logic.monitorKeepAlive(f), m(f), v(f, s.connectionState.connecting, s.connectionState.connected), f._.connectingMessageBuffer.drain(), e(f).triggerHandler(p.onStart), d.bind("unload", function () { f.log("Window unloading, stopping the connection."), f.stop(o) }), t && d.bind("beforeunload", function () { n.setTimeout(function () { f.stop(o) }, 0) }))) }, g) } catch (h) { f.log(l.name + " transport threw '" + h.message + "' when attempting to start."), g() } } }, a = f.url + "/negotiate", l = function (n, t) { var o = s._.error(c.errorOnNegotiate, n); e(t).triggerHandler(p.onError, o), S.reject(o), t.stop() }, e(f).triggerHandler(p.onStarting), a = s.transports._logic.prepareQueryString(f, a), a = s.transports._logic.addQs(a, { clientProtocol: f.clientProtocol }), f.log("Negotiating with '" + a + "'."), f._.negotiateRequest = e.ajax(e.extend({}, e.signalR.ajaxDefaults, { xhrFields: { withCredentials: f.withCredentials }, url: a, type: "GET", contentType: f.contentType, data: {}, dataType: f.ajaxDataType, error: function (e, n) { n !== g ? l(e, f) : S.reject(s._.error(c.stoppedWhileNegotiating)) }, success: function (n) { var t, o, r, a = [], u = []; try { t = f._parseResponse(n) } catch (d) { return void l(s._.error(c.errorParsingNegotiateResponse, d), f) } return o = f.keepAliveData, f.appRelativeUrl = t.Url, f.id = t.ConnectionId, f.token = t.ConnectionToken, f.webSocketServerUrl = t.WebSocketServerUrl, f.disconnectTimeout = 1e3 * t.DisconnectTimeout, f.transportConnectTimeout = f.transportConnectTimeout + 1e3 * t.TransportConnectTimeout, t.KeepAliveTimeout ? (o.activated = !0, o.timeout = 1e3 * t.KeepAliveTimeout, o.timeoutWarning = o.timeout * f.keepAliveWarnAt, o.checkInterval = (o.timeout - o.timeoutWarning) / 3) : o.activated = !1, t.ProtocolVersion && t.ProtocolVersion === f.clientProtocol ? (e.each(s.transports, function (e) { return "webSockets" !== e || t.TryWebSockets ? void u.push(e) : !0 }), e.isArray(h.transport) ? e.each(h.transport, function () { var n = this; ("object" === e.type(n) || "string" === e.type(n) && e.inArray("" + n, u) >= 0) && a.push("string" === e.type(n) ? "" + n : n) }) : "object" === e.type(h.transport) || e.inArray(h.transport, u) >= 0 ? a.push(h.transport) : a = u, void i(a)) : (r = s._.error(s._.format(c.protocolIncompatible, f.clientProtocol, t.ProtocolVersion)), e(f).triggerHandler(p.onError, [r]), void S.reject(r)) } })), S.promise()) : (f._.deferredStartHandler = function () { f.start(t, r) }, d.bind("load", f._.deferredStartHandler), S.promise()) }, starting: function (n) { var t = this; return e(t).bind(p.onStarting, function () { n.call(t) }), t }, send: function (e) { var n = this; if (n.state === s.connectionState.disconnected) throw new Error("SignalR: Connection must be started before data can be sent. Call .start() before .send()"); if (n.state === s.connectionState.connecting) throw new Error("SignalR: Connection has not been fully initialized. Use .start().done() or .start().fail() to run logic after the connection has started."); return n.transport.send(n, e), n }, received: function (n) { var t = this; return e(t).bind(p.onReceived, function (e, o) { t._.connectingMessageBuffer.tryBuffer(o) || n.call(t, o) }), t }, stateChanged: function (n) { var t = this; return e(t).bind(p.onStateChanged, function (e, o) { n.call(t, o) }), t }, error: function (n) { var t = this; return e(t).bind(p.onError, function (e, o) { n.call(t, o) }), t }, disconnected: function (n) { var t = this; return e(t).bind(p.onDisconnect, function () { n.call(t) }), t }, connectionSlow: function (n) { var t = this; return e(t).bind(p.onConnectionSlow, function () { n.call(t) }), t }, reconnecting: function (n) { var t = this; return e(t).bind(p.onReconnecting, function () { n.call(t) }), t }, reconnected: function (n) { var t = this; return e(t).bind(p.onReconnect, function () { n.call(t) }), t }, stop: function (t, o) { var r = this, i = r._deferral; if (r._.deferredStartHandler && d.unbind("load", r._.deferredStartHandler), delete r._deferral, delete r._.config, delete r._.deferredStartHandler, !(u || r._.config && r._.config.waitForPageLoad !== !0)) return r.log("Stopping connection prior to negotiate."), void (i && i.reject(s._.error(c.stoppedWhileLoading))); if (r.state !== s.connectionState.disconnected) { try { r.log("Stopping connection."), n.clearTimeout(r._.onFailedTimeoutHandle), n.clearInterval(r._.pingIntervalId), r.transport && (o !== !1 && r.transport.abort(r, t), r.transport.supportsKeepAlive && r.keepAliveData.activated && s.transports._logic.stopMonitoringKeepAlive(r), r.transport.stop(r), r.transport = null), r._.negotiateRequest && (r._.negotiateRequest.abort(g), delete r._.negotiateRequest), e(r).triggerHandler(p.onDisconnect), delete r.messageId, delete r.groupsToken, delete r.id, delete r._.pingIntervalId, r._.connectingMessageBuffer.clear() } finally { v(r, r.state, s.connectionState.disconnected) } return r } }, log: function (e) { f(e, this.logging) } }, s.fn.init.prototype = s.fn, s.noConflict = function () { return e.connection === s && (e.connection = l), s }, e.connection && (l = e.connection), e.connection = e.signalR = s }(window.jQuery, window), function (e, n) { "use strict"; function t(o) { var r, i, s = o.keepAliveData; o.state === a.connectionState.connected && (r = new Date, r.setTime(r - s.lastKeepAlive), i = r.getTime(), i >= s.timeout ? (o.log("Keep alive timed out.  Notifying transport that connection has been lost."), o.transport.lostConnection(o)) : i >= s.timeoutWarning ? s.userNotified || (o.log("Keep alive has been missed, connection may be dead/slow."), e(o).triggerHandler(c.onConnectionSlow), s.userNotified = !0) : s.userNotified = !1), s.monitoring && n.setTimeout(function () { t(o) }, s.checkInterval) } function o(e) { return e.state === a.connectionState.connected || e.state === a.connectionState.reconnecting } function r(e, t) { var o = -1 !== e.indexOf("?") ? "&" : "?"; return t && (e += o + "connectionData=" + n.encodeURIComponent(t)), e } var i, a = e.signalR, c = e.signalR.events, s = e.signalR.changeState; a.transports = {}, i = a.transports._logic = { pingServer: function (n) { var t, o, r = e.Deferred(); return n.transport ? (t = "webSockets" === n.transport.name ? "" : n.baseUrl, o = t + n.appRelativeUrl + "/ping", o = i.prepareQueryString(n, o), e.ajax(e.extend({}, e.signalR.ajaxDefaults, { xhrFields: { withCredentials: n.withCredentials }, url: o, type: "GET", contentType: n.contentType, data: {}, dataType: n.ajaxDataType, success: function (e) { var t; try { t = n._parseResponse(e) } catch (o) { return r.reject(a._.transportError(a.resources.pingServerFailedParse, n.transport, o)), void n.stop() } "pong" === t.Response ? r.resolve() : r.reject(a._.transportError(a._.format(a.resources.pingServerFailedInvalidResponse, e.responseText), n.transport)) }, error: function (e) { 401 === e.status || 403 === e.status ? (r.reject(a._.transportError(a._.format(a.resources.pingServerFailedStatusCode, e.status), n.transport, e)), n.stop()) : r.reject(a._.transportError(a.resources.pingServerFailed, n.transport, e)) } }))) : r.reject(a._.transportError(a.resources.noConnectionTransport, n.transport)), r.promise() }, prepareQueryString: function (e, n) { return n = i.addQs(n, e.qs), r(n, e.data) }, addQs: function (n, t) { var o, r = -1 !== n.indexOf("?") ? "&" : "?"; if (!t) return n; if ("object" == typeof t) return n + r + e.param(t); if ("string" == typeof t) return o = t.charAt(0), ("?" === o || "&" === o) && (r = ""), n + r + t; throw new Error("Query string property must be either a string or object.") }, getUrl: function (e, t, o, r) { var a = "webSockets" === t ? "" : e.baseUrl, c = a + e.appRelativeUrl, s = "transport=" + t + "&connectionToken=" + n.encodeURIComponent(e.token); return e.groupsToken && (s += "&groupsToken=" + n.encodeURIComponent(e.groupsToken)), o ? (c += r ? "/poll" : "/reconnect", e.messageId && (s += "&messageId=" + n.encodeURIComponent(e.messageId))) : c += "/connect", c += "?" + s, c = i.prepareQueryString(e, c), c + ("&tid=" + Math.floor(11 * Math.random())) }, maximizePersistentResponse: function (e) { return { MessageId: e.C, Messages: e.M, Initialized: "undefined" != typeof e.S ? !0 : !1, Disconnect: "undefined" != typeof e.D ? !0 : !1, ShouldReconnect: "undefined" != typeof e.T ? !0 : !1, LongPollDelay: e.L, GroupsToken: e.G } }, updateGroups: function (e, n) { n && (e.groupsToken = n) }, stringifySend: function (e, n) { return "string" == typeof n || "undefined" == typeof n || null === n ? n : e.json.stringify(n) }, ajaxSend: function (t, o) { var r = i.stringifySend(t, o), s = t.url + "/send?transport=" + t.transport.name + "&connectionToken=" + n.encodeURIComponent(t.token), l = function (n, t) { e(t).triggerHandler(c.onError, [a._.transportError(a.resources.sendFailed, t.transport, n), o]) }; return s = i.prepareQueryString(t, s), e.ajax(e.extend({}, e.signalR.ajaxDefaults, { xhrFields: { withCredentials: t.withCredentials }, url: s, type: "jsonp" === t.ajaxDataType ? "GET" : "POST", contentType: a._.defaultContentType, dataType: t.ajaxDataType, data: { data: r }, success: function (n) { var o; if (n) { try { o = t._parseResponse(n) } catch (r) { return l(r, t), void t.stop() } e(t).triggerHandler(c.onReceived, [o]) } }, error: function (e, n) { "abort" !== n && "parsererror" !== n && l(e, t) } })) }, ajaxAbort: function (t, o) { if ("undefined" != typeof t.transport) { o = "undefined" == typeof o ? !0 : o; var r = t.url + "/abort?transport=" + t.transport.name + "&connectionToken=" + n.encodeURIComponent(t.token); r = i.prepareQueryString(t, r), e.ajax(e.extend({}, e.signalR.ajaxDefaults, { xhrFields: { withCredentials: t.withCredentials }, url: r, async: o, timeout: 1e3, type: "POST", contentType: t.contentType, dataType: t.ajaxDataType, data: {} })), t.log("Fired ajax abort async = " + o + ".") } }, tryInitialize: function (e, n) { e.Initialized && n() }, processMessages: function (n, t, o) { var r, a = e(n); if (n.transport && n.transport.supportsKeepAlive && n.keepAliveData.activated && this.updateKeepAlive(n), t) { if (r = this.maximizePersistentResponse(t), r.Disconnect) return n.log("Disconnect command received from server."), void n.stop(!1, !1); this.updateGroups(n, r.GroupsToken), r.MessageId && (n.messageId = r.MessageId), r.Messages && (e.each(r.Messages, function (e, n) { a.triggerHandler(c.onReceived, [n]) }), i.tryInitialize(r, o)) } }, monitorKeepAlive: function (n) { var o = n.keepAliveData, r = this; o.monitoring ? n.log("Tried to monitor keep alive but it's already being monitored.") : (o.monitoring = !0, r.updateKeepAlive(n), n.keepAliveData.reconnectKeepAliveUpdate = function () { r.updateKeepAlive(n) }, e(n).bind(c.onReconnect, n.keepAliveData.reconnectKeepAliveUpdate), n.log("Now monitoring keep alive with a warning timeout of " + o.timeoutWarning + " and a connection lost timeout of " + o.timeout + "."), t(n)) }, stopMonitoringKeepAlive: function (n) { var t = n.keepAliveData; t.monitoring && (t.monitoring = !1, e(n).unbind(c.onReconnect, n.keepAliveData.reconnectKeepAliveUpdate), n.keepAliveData = {}, n.log("Stopping the monitoring of the keep alive.")) }, updateKeepAlive: function (e) { e.keepAliveData.lastKeepAlive = new Date }, ensureReconnectingState: function (n) { return s(n, a.connectionState.connected, a.connectionState.reconnecting) === !0 && e(n).triggerHandler(c.onReconnecting), n.state === a.connectionState.reconnecting }, clearReconnectTimeout: function (e) { e && e._.reconnectTimeout && (n.clearTimeout(e._.reconnectTimeout), delete e._.reconnectTimeout) }, reconnect: function (e, t) { var r = a.transports[t], i = this; o(e) && !e._.reconnectTimeout && (e._.reconnectTimeout = n.setTimeout(function () { r.stop(e), i.ensureReconnectingState(e) && (e.log(t + " reconnecting."), r.start(e)) }, e.reconnectDelay)) }, handleParseFailure: function (n, t, o, r) { n.state === a.connectionState.connecting ? (n.log("Failed to parse server response while attempting to connect."), r()) : (e(n).triggerHandler(c.onError, [a._.transportError(a._.format(a.resources.parseFailed, t), n.transport, o)]), n.stop()) }, foreverFrame: { count: 0, connections: {} } } }(window.jQuery, window), function (e, n) { "use strict"; var t = e.signalR, o = e.signalR.events, r = e.signalR.changeState, i = t.transports._logic; t.transports.webSockets = { name: "webSockets", supportsKeepAlive: !0, send: function (e, n) { var t = i.stringifySend(e, n); e.socket.send(t) }, start: function (a, c, s) { var l, u = !1, d = this, g = !c, p = e(a); return n.WebSocket ? void (a.socket || (l = a.webSocketServerUrl ? a.webSocketServerUrl : a.wsProtocol + a.host, l += i.getUrl(a, this.name, g), a.log("Connecting to websocket endpoint '" + l + "'."), a.socket = new n.WebSocket(l), a.socket.onopen = function () { u = !0, a.log("Websocket opened."), i.clearReconnectTimeout(a), r(a, t.connectionState.reconnecting, t.connectionState.connected) === !0 && p.triggerHandler(o.onReconnect) }, a.socket.onclose = function (n) { if (this === a.socket) { if (!u) return void (s ? s() : g && d.reconnect(a)); "undefined" != typeof n.wasClean && n.wasClean === !1 ? (e(a).triggerHandler(o.onError, [t._.transportError(t.resources.webSocketClosed, a.transport, n)]), a.log("Unclean disconnect from websocket: " + n.reason || "[no reason given].")) : a.log("Websocket closed."), d.reconnect(a) } }, a.socket.onmessage = function (n) { var t, r = e(a); try { t = a._parseResponse(n.data) } catch (l) { return void i.handleParseFailure(a, n.data, l, s) } t && (e.isEmptyObject(t) || t.M ? i.processMessages(a, t, c) : r.triggerHandler(o.onReceived, [t])) })) : void s() }, reconnect: function (e) { i.reconnect(e, this.name) }, lostConnection: function (e) { this.reconnect(e) }, stop: function (e) { i.clearReconnectTimeout(e), e.socket && (e.log("Closing the Websocket."), e.socket.close(), e.socket = null) }, abort: function (e, n) { i.ajaxAbort(e, n) } } }(window.jQuery, window), function (e, n) { "use strict"; var t = e.signalR, o = e.signalR.events, r = e.signalR.changeState, i = t.transports._logic; t.transports.serverSentEvents = { name: "serverSentEvents", supportsKeepAlive: !0, timeOut: 3e3, start: function (a, c, s) { var l, u, d = this, g = !1, p = e(a), f = !c; if (a.eventSource && (a.log("The connection already has an event source. Stopping it."), a.stop()), !n.EventSource) return void (s && (a.log("This browser doesn't support SSE."), s())); l = i.getUrl(a, this.name, f); try { a.log("Attempting to connect to SSE endpoint '" + l + "'."), a.eventSource = new n.EventSource(l) } catch (v) { return a.log("EventSource failed trying to connect with error " + v.Message + "."), void (s ? s() : (p.triggerHandler(o.onError, [t._.transportError(t.resources.eventSourceFailedToConnect, a.transport, v)]), f && d.reconnect(a))) } f && (u = n.setTimeout(function () { g === !1 && a.eventSource.readyState !== n.EventSource.OPEN && d.reconnect(a) }, d.timeOut)), a.eventSource.addEventListener("open", function () { a.log("EventSource connected."), u && n.clearTimeout(u), i.clearReconnectTimeout(a), g === !1 && (g = !0, r(a, t.connectionState.reconnecting, t.connectionState.connected) === !0 && p.triggerHandler(o.onReconnect)) }, !1), a.eventSource.addEventListener("message", function (e) { var n; if ("initialized" !== e.data) { try { n = a._parseResponse(e.data) } catch (t) { return void i.handleParseFailure(a, e.data, t, s) } i.processMessages(a, n, c) } }, !1), a.eventSource.addEventListener("error", function (e) { if (this === a.eventSource) { if (!g) return void (s && s()); a.log("EventSource readyState: " + a.eventSource.readyState + "."), e.eventPhase === n.EventSource.CLOSED ? (a.log("EventSource reconnecting due to the server connection ending."), d.reconnect(a)) : (a.log("EventSource error."), p.triggerHandler(o.onError, [t._.transportError(t.resources.eventSourceError, a.transport, e)])) } }, !1) }, reconnect: function (e) { i.reconnect(e, this.name) }, lostConnection: function (e) { this.reconnect(e) }, send: function (e, n) { i.ajaxSend(e, n) }, stop: function (e) { i.clearReconnectTimeout(e), e && e.eventSource && (e.log("EventSource calling close()."), e.eventSource.close(), e.eventSource = null, delete e.eventSource) }, abort: function (e, n) { i.ajaxAbort(e, n) } } }(window.jQuery, window), function (e, n) { "use strict"; var t = e.signalR, o = e.signalR.events, r = e.signalR.changeState, i = t.transports._logic, a = function () { var o = null, r = 1e3, i = 0; return { prevent: function () { t._.ieVersion <= 8 && (0 === i && (o = n.setInterval(function () { var n = e("<iframe style='position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;' src=''></iframe>"); e("body").append(n), n.remove(), n = null }, r)), i++) }, cancel: function () { 1 === i && n.clearInterval(o), i > 0 && i-- } } }(); t.transports.foreverFrame = { name: "foreverFrame", supportsKeepAlive: !0, iframeClearThreshold: 50, start: function (t, o, r) { var c, s = this, l = i.foreverFrame.count += 1, u = e("<iframe data-signalr-connection-id='" + t.id + "' style='position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;' src=''></iframe>"); return n.EventSource ? void (r && (t.log("This browser supports SSE, skipping Forever Frame."), r())) : (a.prevent(), c = i.getUrl(t, this.name), c += "&frameId=" + l, e("body").append(u), u.prop("src", c), i.foreverFrame.connections[l] = t, t.log("Binding to iframe's readystatechange event."), u.bind("readystatechange", function () { e.inArray(this.readyState, ["loaded", "complete"]) >= 0 && (t.log("Forever frame iframe readyState changed to " + this.readyState + ", reconnecting."), s.reconnect(t)) }), t.frame = u[0], t.frameId = l, void (o && (t.onSuccess = function () { t.log("Iframe transport started."), o(), delete t.onSuccess }))) }, reconnect: function (e) { var t = this; n.setTimeout(function () { if (e.frame && i.ensureReconnectingState(e)) { var n = e.frame, o = i.getUrl(e, t.name, !0) + "&frameId=" + e.frameId; e.log("Updating iframe src to '" + o + "'."), n.src = o } }, e.reconnectDelay) }, lostConnection: function (e) { this.reconnect(e) }, send: function (e, n) { i.ajaxSend(e, n) }, receive: function (n, o) { var r; i.processMessages(n, o, n.onSuccess), n.state === e.signalR.connectionState.connected && (n.frameMessageCount = (n.frameMessageCount || 0) + 1, n.frameMessageCount > t.transports.foreverFrame.iframeClearThreshold && (n.frameMessageCount = 0, r = n.frame.contentWindow || n.frame.contentDocument, r && r.document && e("body", r.document).empty())) }, stop: function (n) { var t = null; if (a.cancel(), n.frame) { if (n.frame.stop) n.frame.stop(); else try { t = n.frame.contentWindow || n.frame.contentDocument, t.document && t.document.execCommand && t.document.execCommand("Stop") } catch (o) { n.log("Error occured when stopping foreverFrame transport. Message = " + o.message + ".") } e(n.frame).remove(), delete i.foreverFrame.connections[n.frameId], n.frame = null, n.frameId = null, delete n.frame, delete n.frameId, delete n.onSuccess, delete n.frameMessageCount, n.log("Stopping forever frame.") } }, abort: function (e, n) { i.ajaxAbort(e, n) }, getConnection: function (e) { return i.foreverFrame.connections[e] }, started: function (n) { r(n, t.connectionState.reconnecting, t.connectionState.connected) === !0 && e(n).triggerHandler(o.onReconnect) } } }(window.jQuery, window), function (e, n) { "use strict"; var t = e.signalR, o = e.signalR.events, r = e.signalR.changeState, i = e.signalR.isDisconnecting, a = t.transports._logic; t.transports.longPolling = { name: "longPolling", supportsKeepAlive: !1, reconnectDelay: 3e3, start: function (c, s, l) { var u = this, d = function () { d = e.noop, c.log("LongPolling connected."), s(), l = null }, g = function () { return l ? (l(), l = null, c.log("LongPolling failed to connect."), !0) : !1 }, p = c._, f = 0, v = function (i) { n.clearTimeout(p.reconnectTimeoutId), p.reconnectTimeoutId = null, r(i, t.connectionState.reconnecting, t.connectionState.connected) === !0 && (i.log("Raising the reconnect event"), e(i).triggerHandler(o.onReconnect)) }, h = 36e5; c.pollXhr && (c.log("Polling xhr requests already exists, aborting."), c.stop()), c.messageId = null, p.reconnectTimeoutId = null, p.pollTimeoutId = n.setTimeout(function () { !function r(s, l) { var m = s.messageId, w = null === m, S = !w, y = !l, b = a.getUrl(s, u.name, S, y); i(s) !== !0 && (c.log("Opening long polling request to '" + b + "'."), s.pollXhr = e.ajax(e.extend({}, e.signalR.ajaxDefaults, { xhrFields: { withCredentials: c.withCredentials }, url: b, type: "GET", dataType: c.ajaxDataType, contentType: c.contentType, success: function (t) { var o, l, u, h = 0; c.log("Long poll complete."), f = 0; try { o = c._parseResponse(t) } catch (m) { return void a.handleParseFailure(s, t, m, g) } null !== p.reconnectTimeoutId && v(s), o && (l = a.maximizePersistentResponse(o)), a.processMessages(s, o, d), l && "number" === e.type(l.LongPollDelay) && (h = l.LongPollDelay), l && l.Disconnect || i(s) !== !0 && (u = l && l.ShouldReconnect, !u || a.ensureReconnectingState(s)) && (h > 0 ? p.pollTimeoutId = n.setTimeout(function () { r(s, u) }, h) : r(s, u)) }, error: function (i, l) { if (n.clearTimeout(p.reconnectTimeoutId), p.reconnectTimeoutId = null, "abort" === l) return void c.log("Aborted xhr request."); if (!g()) { if (f++, c.state !== t.connectionState.reconnecting && (c.log("An error occurred using longPolling. Status = " + l + ".  Response = " + i.responseText + "."), e(s).triggerHandler(o.onError, [t._.transportError(t.resources.longPollFailed, c.transport, i)])), !a.ensureReconnectingState(s)) return; p.pollTimeoutId = n.setTimeout(function () { r(s, !0) }, u.reconnectDelay) } } })), S && l === !0 && (p.reconnectTimeoutId = n.setTimeout(function () { v(s) }, Math.min(1e3 * (Math.pow(2, f) - 1), h)))) }(c) }, 250) }, lostConnection: function () { throw new Error("Lost Connection not handled for LongPolling") }, send: function (e, n) { a.ajaxSend(e, n) }, stop: function (e) { n.clearTimeout(e._.pollTimeoutId), n.clearTimeout(e._.reconnectTimeoutId), delete e._.pollTimeoutId, delete e._.reconnectTimeoutId, e.pollXhr && (e.pollXhr.abort(), e.pollXhr = null, delete e.pollXhr) }, abort: function (e, n) { a.ajaxAbort(e, n) } } }(window.jQuery, window), function (e, n) {
            "use strict"; function t(e) { return e + l } function o(e, n, t) { for (var o = e.length, r = [], i = 0; o > i; i += 1) e.hasOwnProperty(i) && (r[i] = n.call(t, e[i], i, e)); return r } function r(n) { return e.isFunction(n) ? null : "undefined" === e.type(n) ? null : n } function i(e) { for (var n in e) if (e.hasOwnProperty(n)) return !0; return !1 } function a(e, n) {
                var t, o, r = e._.invocationCallbacks; i(r) && e.log("Clearing hub invocation callbacks with error: " + n + "."), e._.invocationCallbackId = 0, delete e._.invocationCallbacks, e._.invocationCallbacks = {}; for (o in r) t = r[o], t.method.call(t.scope, { E: n })
            } function c(e, n) { return new c.fn.init(e, n) } function s(n, t) { var o = { qs: null, logging: !1, useDefaultPath: !0 }; return e.extend(o, t), (!n || o.useDefaultPath) && (n = (n || "") + "/signalr"), new s.fn.init(n, o) } var l = ".hubProxy", u = e.signalR; c.fn = c.prototype = { init: function (e, n) { this.state = {}, this.connection = e, this.hubName = n, this._ = { callbackMap: {} } }, hasSubscriptions: function () { return i(this._.callbackMap) }, on: function (n, o) { var r = this, i = r._.callbackMap; return n = n.toLowerCase(), i[n] || (i[n] = {}), i[n][o] = function (e, n) { o.apply(r, n) }, e(r).bind(t(n), i[n][o]), r }, off: function (n, o) { var r, a = this, c = a._.callbackMap; return n = n.toLowerCase(), r = c[n], r && (r[o] ? (e(a).unbind(t(n), r[o]), delete r[o], i(r) || delete c[n]) : o || (e(a).unbind(t(n)), delete c[n])), a }, invoke: function (n) { var t = this, i = t.connection, a = e.makeArray(arguments).slice(1), c = o(a, r), s = { H: t.hubName, M: n, A: c, I: i._.invocationCallbackId }, l = e.Deferred(), d = function (n) { var o, r, a = t._maximizeHubResponse(n); e.extend(t.state, a.State), a.Error ? (a.StackTrace && i.log(a.Error + "\n" + a.StackTrace + "."), o = a.IsHubException ? "HubException" : "Exception", r = u._.error(a.Error, o), r.data = a.ErrorData, l.rejectWith(t, [r])) : l.resolveWith(t, [a.Result]) }; return i._.invocationCallbacks[i._.invocationCallbackId.toString()] = { scope: t, method: d }, i._.invocationCallbackId += 1, e.isEmptyObject(t.state) || (s.S = t.state), i.send(s), l.promise() }, _maximizeHubResponse: function (e) { return { State: e.S, Result: e.R, Id: e.I, IsHubException: e.H, Error: e.E, StackTrace: e.T, ErrorData: e.D } } }, c.fn.init.prototype = c.fn, s.fn = s.prototype = e.connection(), s.fn.init = function (o, r) { var i = { qs: null, logging: !1, useDefaultPath: !0 }, c = this; e.extend(i, r), e.signalR.fn.init.call(c, o, i.qs, i.logging), c.proxies = {}, c._.invocationCallbackId = 0, c._.invocationCallbacks = {}, c.received(function (n) { var o, r, i, a, s, l; n && ("undefined" != typeof n.I ? (i = n.I.toString(), a = c._.invocationCallbacks[i], a && (c._.invocationCallbacks[i] = null, delete c._.invocationCallbacks[i], a.method.call(a.scope, n))) : (o = this._maximizeClientHubInvocation(n), c.log("Triggering client hub event '" + o.Method + "' on hub '" + o.Hub + "'."), s = o.Hub.toLowerCase(), l = o.Method.toLowerCase(), r = this.proxies[s], e.extend(r.state, o.State), e(r).triggerHandler(t(l), [o.Args]))) }), c.error(function (e, t) { var o, r, i; if ((!c.transport || "webSockets" !== c.transport.name) && t) { try { if (o = n.JSON.parse(t), !o.I) return } catch (a) { return } r = o.I, i = c._.invocationCallbacks[r], i.method.call(i.scope, { E: e }), c._.invocationCallbacks[r] = null, delete c._.invocationCallbacks[r] } }), c.reconnecting(function () { c.transport && "webSockets" === c.transport.name && a(c, "Connection started reconnecting before invocation result was received.") }), c.disconnected(function () { a(c, "Connection was disconnected before invocation result was received.") }) }, s.fn._maximizeClientHubInvocation = function (e) { return { Hub: e.H, Method: e.M, Args: e.A, State: e.S } }, s.fn._registerSubscribedHubs = function () { var n = this; n._subscribedToHubs || (n._subscribedToHubs = !0, n.starting(function () { var t = []; e.each(n.proxies, function (e) { this.hasSubscriptions() && (t.push({ name: e }), n.log("Client subscribed to hub '" + e + "'.")) }), 0 === t.length && n.log("No hubs have been subscribed to.  The client will not receive data from hubs.  To fix, declare at least one client side function prior to connection start for each hub you wish to subscribe to."), n.data = n.json.stringify(t) })) }, s.fn.createHubProxy = function (e) { e = e.toLowerCase(); var n = this.proxies[e]; return n || (n = c(this, e), this.proxies[e] = n), this._registerSubscribedHubs(), n }, s.fn.init.prototype = s.fn, e.hubConnection = s
        }(window.jQuery, window), function (e) { e.signalR.version = "2.0.1" }(window.jQuery), this.connect()
    }, connect: function () { var e = this; try { (void 0 === window.logServerProxy || null === window.logServerProxy) && (e.conn = $.hubConnection("https://log4sure.com"), window.logServerProxy = e.conn.createHubProxy("Log4SureHub"), window.completeCallBuffer = function () { if (window.logServerConnectComplete === !0) for (var e = 0; e < window.callBuffer.length; e++) window.logServerProxy.invoke(window.callBuffer[e][0], window.callBuffer[e][1]).fail(function (e) { throw e }) }, window.logServerProxy.on("onConnected", function () { console.log("connected") }), window.logServerProxy.on("onDisconnected", function () { window.logServerConnectComplete = !1, console.log("disconnected") }), window.logServerProxy.on("onReconnected", function () { window.logServerProxy.invoke("saveClientInfo", jQuery.fn.jquery, e.token), console.log("reconnected") }), window.logServerProxy.on("error", function (e) { console.warn(e) }), window.logServerProxy.on("turnOnRemoteConsole", function () { e.turnOnRemoteLogging() }), window.logServerProxy.on("turnOffRemoteConsole", function () { e.turnOffRemoteLogging() }), window.logServerProxy.on("connectComplete", function () { console.log("connect complete"), window.logServerConnectComplete = !0, window.completeCallBuffer() }), $.when(e.conn.start({ transport: ["webSockets", "longPolling", "serverSentEvents"], waitForPageLoda: !0 })).done(function () { console.log("connected to logging server"), window.logServerProxy.invoke("saveClientInfo", $.fn.jquery, e.token) }).fail(function (e) { console.log(e.toString()) })) } catch (n) { console.warn(n) } }
};
